import rxtxrobot.*;
import java.lang.Math;
public class Lab {
	static boolean stop = false;
	
	static RXTXRobot r = new ArduinoUno();
	final private static int PING_PIN = 7;
	
	/*
	final private static int Con_PIN1 = 12;
	final private static int Con_PIN2 = 13;
	*/
	static public void main(String[] args){
		r.setPort("COM4");
		r.connect();
		
		r.attachMotor(RXTXRobot.MOTOR1,5);//L
		r.attachMotor(RXTXRobot.MOTOR2,6);//Right
		r.attachServo(RXTXRobot.SERVO1,10);//Hand
		r.attachServo(RXTXRobot.SERVO2,8);//conductor
	
		
		
		/*
		
		MoveE();
		int bump = 1200;
		while(bump>=1000) 
		{ 
			r.refreshAnalogPins();
	
			bump = r.getAnalogPin(3).getValue(); 
		
				System.out.println("Bump is " + bump);
			
			if( bump <= 1000){
				Stop();	
				r.close();
				return;
			} 	
		}
		
		r.sleep(3000);
		
		stop = false;
		turnA();
		MoveE();
		while(!stop){
			float distance = Sense();
			if (distance <= 80){
				Stop();
				stop = true;
				
			}
		}
		
		r.sleep(3000);
		turnRight();
		r.sleep(3000);
		

		stop = false;
		MoveE();
		while(!stop){
			float distance = Sense();
			if (distance <= 20){
				Stop();
				stop = true;
				
			}
		}
		
		r.sleep(3000);
		turnLeft();
		r.sleep(3000);
		
		MoveE();
		int bump2 = 1200;
		while(bump2>=1000) 
		{ 
			r.refreshAnalogPins();
	
			bump2 = r.getAnalogPin(3).getValue(); 
		
				System.out.println("Bump is " + bump);
			
			if( bump2 <= 1000){
				Stop();	
				r.close();
				return;
			} 	
		}
		
		
		*/
		
		
		//Move(2000);
		//turnLeft();
		//r.runMotor(RXTXRobot.MOTOR1, 100, 1500);
		 
		
		
		/*
		Move(4500);
		r.sleep(4000);
		turnRight();
		r.sleep(4000);
		
		Move(0);
		while(!stop){
			float distance = Sense();
			if (distance <= 50){
				Stop();
				stop = true;
			}
		}
		*/
		/*
		Climb(2500);
		r.sleep(4000);
		up();
		r.sleep(4000);
		Temp();
		r.sleep(4000);
		Wind();
		r.sleep(4000);
		down();
		r.sleep(4000);
		Move(2500);
		
		*/
		/*
		while(!stop){
			float distance = Sense();
			if (distance <= 50){
				stop = true;
				
			}
			r.sleep(300);
		}
		*/
		//Move(2000);
		
		
	
		
		/*
		feel(50,60);
		r.sleep(1000);
		turnRight();
		r.sleep(1000);
		feel(50,60);
		r.sleep(1000);
		turnLeft();
		r.sleep(1000);
		Move(8000);
		r.sleep(1000);
		turnLeft();
		r.sleep(1000);
		feel(80,100);
		r.sleep(1000);
		turnRight();
		
		
		*/
		
		
		
		
		
		
		
		/*
		//start point 4: sand box
		
		*/
		
		
		
		
		
		
		
		r.close();
		
		 }
	
			
			
		
	
	
	static void MoveE(){
		r.runMotor(RXTXRobot.MOTOR1, 100, RXTXRobot.MOTOR2, -105, 0);
	}
	
	
	static void Move(int a){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 149, a, RXTXRobot.MOTOR2, -130, a);
		r.runMotor(RXTXRobot.MOTOR1, 85, RXTXRobot.MOTOR2, -100, a);
	}
	static void Moves(int a){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 149, a, RXTXRobot.MOTOR2, -130, a);
		r.runMotor(RXTXRobot.MOTOR1, 100, RXTXRobot.MOTOR2, -100, a);
	}
	
	static void Back(int a){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, -149, a, RXTXRobot.MOTOR2, 130, a);
		r.runMotor(RXTXRobot.MOTOR1, -100, RXTXRobot.MOTOR2, 100, a);
	}
	
	static void Climb(int a){
		r.runMotor(RXTXRobot.MOTOR1, 250, RXTXRobot.MOTOR2, -240, a);
		
	}
	
	static void Stop(){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 0, 0, RXTXRobot.MOTOR2, 0, 1);
		r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0);
		
	}
	
	static void turnLeft(){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 155, 1, RXTXRobot.MOTOR2, -155, 120);
		//r.runMotor(RXTXRobot.MOTOR1, 1, );
	r.runMotor(RXTXRobot.MOTOR2, -155, 1500);
	}
	static void turnLefts(){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 155, 1, RXTXRobot.MOTOR2, -155, 120);
		//r.runMotor(RXTXRobot.MOTOR1, 1, );
	r.runMotor(RXTXRobot.MOTOR2, -155, 1400);
	}
	
	static void turnRight(){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 155, 100, RXTXRobot.MOTOR2, 155, 1 );
		//r.runMotor(RXTXRobot.MOTOR1, -200, 0);
		r.runMotor(RXTXRobot.MOTOR1, 155, 1300);
	}
	static void turnRights(){
		//r.runEncodedMotor(RXTXRobot.MOTOR1, 155, 100, RXTXRobot.MOTOR2, 155, 1 );
		//r.runMotor(RXTXRobot.MOTOR1, -200, 0);
		r.runMotor(RXTXRobot.MOTOR1, 155, 1300);
	}
	static void bump(){

		Moves(0);
		int bump2 = 1200;
		while(bump2>=1000) 
		{ 
			r.refreshAnalogPins();
	
			bump2 = r.getAnalogPin(3).getValue(); 
		
				System.out.println("Bump is " + bump2);
			
			if( bump2 <= 1000){
				Stop();	
			} 	
		}
	}
	static void turnA(){
		turnRight();
		r.sleep(300);
		turnRight();
	}

	static void feel(int a, int b){
		Move(0);
		stop = false;
		while(!stop){
			float distance = Sense();
			if ( distance <= b && distance >= a ){
				stop = true;
				Stop();
				
			}
			
		}
		
	}

	static void Nav(){
		while (!stop){
			MoveE();
			
			float distance = Sense();
			System.out.println("Bump is " + distance);
			if(distance <= 150){
				Move(10);
				if (distance <= 80){
					Stop();
					stop = true;
				}
			}
				
			
		
		
		 }
}
	
	static float Sense(){
		float ping = 0;
			//r.refreshDigitalPins();
			//Read the ping sensor value, which is connected to pin 12 
			ping = r.getPing(PING_PIN);
			System.out.println("Response: " + ping + " cm");  
	return ping;	
	}
	
	
	static void Cond(){
		boolean in = true;
		for(int i = 0;i< 10;i++){
		double adc = r.getConductivity();
		double per =  (java.lang.Math.log(adc/901.83))/(-0.086);
		System.out.println("Response: " + adc + " ADC");
		
		System.out.println("Response: " + per + " %H2O");
		}		
	}
	
	
	static void Avoid(){
	
		
		Stop();
		r.sleep(300);
		turnRight();
		r.sleep(300);
		Move(1000);
		r.sleep(300);
		turnLeft();
		r.sleep(300);
		Move(2079);
		r.sleep(300);
		turnLeft();
		r.sleep(300);
		Move(1000);
		r.sleep(300);
		turnRight();
		r.sleep(300);
		Move(1000);
		
	}
	
	static void headDown(){
		r.moveServo(RXTXRobot.SERVO2,16);
	}
	
	static void headUp(){
		
		r.moveServo(RXTXRobot.SERVO2,90);	
	}
	
	static void up(){
		for(int i = 0; i< 110; i++){
			r.moveServo(RXTXRobot.SERVO1,179);
			}
	}
	static void down(){
		for(int i = 0; i< 85; i++){
			r.moveServo(RXTXRobot.SERVO1,1);
			}
	}
	
	static void Temp(){
		for(int i = 0; i < 10; i++){
			double thermistorReading = getThermistorReading1();
			System.out.println("In Temperature: " + translate(thermistorReading));
			}
	}
	
	
	static double translate(double a){
		double slope = -7.609540636;
		double intercept = 735.8162544;

		return ((a-intercept)/slope)+2;
		
	}
	
	static double getThermistorReading1(){
		int sum = 0;
		int readingCount = 10;
		
		for(int i = 0; i < readingCount; i++){
			r.refreshAnalogPins(); 
			int reading = r. getAnalogPin(1).getValue();
			sum += reading;
		}
		return sum/readingCount;
	}
	
	static double getThermistorReading2(){
		int sum = 0;
		int readingCount = 10;
		
		for(int i = 0; i < readingCount; i++){
			r.refreshAnalogPins(); 
			int reading = r. getAnalogPin(0).getValue();
			sum += reading;
		}
	return sum/readingCount;
	}
	
	static void Wind(){
		for (int i = 0; i< 10; i ++){
			double thermistorReading1 = getThermistorReading1();
			double thermistorReading2 = getThermistorReading2();
			/*
			System.out.println("The probe read the value:" + thermistorReading);
			System.out.println("In volts:" + (thermistorReading * (5/1023)));
			*/
			double difference = translate(thermistorReading2) - translate(thermistorReading1);
			double wind = difference / 1.5;
			System.out.println("In Temperature1: " + translate(thermistorReading1));
			System.out.println("In Temperature2: " + translate(thermistorReading2)); 
			System.out.println("In Temperature difference: " + difference+"\n");		
			System.out.println("In Wind" + wind+"MPH");	
			}
	}
	static void point1(){
		
		//start point 1:
				//move from 
				Move(4000);
				feel(200,230);
				r.sleep(1000);
				turnRight();
				r.sleep(1000);
			
				//climb the ramp
				Move(6000);
				r.sleep(1000);
				Climb(1700);
				
				//sandbox
				Move(150000);
				Move(0);
				int bump2 = 1200;
				while(bump2>=1000) 
				{ 
					r.refreshAnalogPins();
			
					bump2 = r.getAnalogPin(3).getValue(); 
				
						System.out.println("Bump is " + bump2);
					
					if( bump2 <= 1000){
						Stop();	
					} 	
				}
				headDown();
				r.sleep(2000);
				Cond();
				r.sleep(1000);
				headUp();
				
				//nav to quarter 2 end
				Back(5000);
				r.sleep(1000);
				
				turnLeft();
				r.sleep(1000);
				
				feel(30,50);
				r.sleep(1000);
				
				turnLeft();
				r.sleep(1000);
				
				Move(5000);
				r.sleep(1000);
				
				turnRight();
				r.sleep(1000);
				
				Move(15000);
				feel(110,130);
				r.sleep(1000);
				
				turnLeft();
				r.sleep(1000);
				
				Move(10000);
				feel(30,50);
				
				r.sleep(1000);
	}
	static void point2 (){
		// move from the station
				 Move(6000);
				 feel(30,50);
				 r.sleep(1000);
				 turnLeft();
				 r.sleep(1000);
				 Move(3000);
				 feel(218,190);
				 r.sleep(1000);
				 turnRight();
				 
				 //nav to ramp
				 Move(12000); // guess
				 r.sleep(1000);
				 Climb(1700);
				 //up down measure
				 r.sleep(1000);
				 
				 // nave to the sand box
				 turnLeft();
				 Move(150000);
				 Move(0);
				 int bump2 = 1200;
				 while(bump2>=1000) { 
							r.refreshAnalogPins();
					
							bump2 = r.getAnalogPin(3).getValue(); 
						
								System.out.println("Bump is " + bump2);
							
							if( bump2 <= 1000){
								Stop();	
							} 	
						}
						headDown();
						r.sleep(2000);
						Cond();
						r.sleep(1000);
						headUp();
						
					//nav to the end
					    Back(1500);
					    r.sleep(1000);
					    turnLeft();
					    r.sleep(1000);
					    feel(30,50);
					    r.sleep(1000);
					    turnRight();
					    r.sleep(1000);
					    Move(5000);
					    r.sleep(1000);
					    turnLeft();
					    r.sleep(1000);
					    Move(10000);
					    feel(110,130);
					    r.sleep(1000);
					    turnRight();
					    r.sleep(1000);
					    Move(10000);//guess
					    feel(30,50);
					    r.sleep(1000);
					    	
	}
	
	
	static void point3(){
		//start 3
		
				//move from 3 to 2
				Move(6000);
				feel(30,50);
				r.sleep(1000);
				turnLeft();
				r.sleep(1000);
				Move(6000);
				feel(30,40);
				r.sleep(1000);
				turnRight();
				r.sleep(1000);
				
				//Nav to Ramp
				Move(8000);//guess
				r.sleep(1000);
				turnLeft();//guess
				r.sleep(1000);
				Move(5000);//guess
				r.sleep(1000);
				turnLeft();
				r.sleep(1000);
				
				
				//nav to ramp
				Back(0);
				stop = false;
				while(!stop){
					float distance = Sense();
					if ( distance <=  && distance >= a ){ //guess
						stop = true;
						Stop();	
					}
				}
				
				r.sleep(1000);
				turnRight();
				r.sleep(1000);
				
				//climb
				Move(6000);
				r.sleep(1000);
				Climb(1700);
				//up down measure
				turnLeft();
				r.sleep(1000);
				Move(15000);//guess
				Move(0);
						int bump2 = 1200;
						while(bump2>=1000) 
						{ 
							r.refreshAnalogPins();
					
							bump2 = r.getAnalogPin(3).getValue(); 
						
								System.out.println("Bump is " + bump2);
							
							if( bump2 <= 1000){
								Stop();	
							} 	
						}
						headDown();
						r.sleep(2000);
						Cond();
						r.sleep(1000);
						headUp();
						
						//nav to end
						Back(2000);
						r.sleep(1000);
						turnRight();
						r.sleep(1000);
						Move(5000); //guess
						r.sleep(1000);
						turnRight();
						r.sleep(1000);
						
						Back(0);
					stop = false;
					while(!stop){
					float distance = Sense();
						if ( distance <=b  && distance >= a ){ //guess
							stop = true;
							Stop();	
						}
					}
					
					r.sleep(1000);
					turnRight();
					r.sleep(1000);
						
					Back(0);
					stop = false;
					while(!stop){
					float distance = Sense();
						if ( distance <=b  && distance >= a ){ //guess
							stop = true;
							Stop();	
						}
					}
					r.sleep(1000);
					turnRight();
					r.sleep(1000);
					Move(6000);
					r.sleep(1000);
					feel(30,50);
					
				
		
	}
	
	
	static void point4(){
		//start point 4
		Move(4000); 
		feel(220,260);
		 r.sleep(1000);
		 turnRight();
		 r.sleep(1000);
		 Move(0);
			int bump2 = 1200;
			while(bump2>=1000) 
			{ 
				r.refreshAnalogPins();
		
				bump2 = r.getAnalogPin(3).getValue(); 
			
					System.out.println("Bump is " + bump2);
				
				if( bump2 <= 1000){
					Stop();	
				} 	
			}
		headDown();	
		r.sleep(1000);
		Cond();
		r.sleep(1000);
		headUp();
		r.sleep(1000);
		
		// nav to the ramp
		Back(1500);
		r.sleep(1000);
		
		turnLeft();
		r.sleep(1000);
		
		feel(30,50);
		r.sleep(1000);
		
		turnRight();
		r.sleep(1000);
		
		feel(165,200);
		r.sleep(1000);
		
		turnLefts();
		r.sleep(1000);
		
		Move(15000);
		r.sleep(1000);
		
		Climb(2000);//guess
		r.sleep(1000);
		
		//up down measure;
		
		//move to the end:  undefined!!!
		Move(5000); //guess
		r.sleep(1000);
		
		turnLeft();
		r.sleep(1000);
		
		Move(2000);
		feel(30, 50);
		r.sleep(1000);
	}
	
}

/*
static float obst(){
		
		r.refreshDigitalPins();
		//Read the ping sensor value, which is connected to pin 12 
		float ping = r.getPing(PING_PIN);
		System.out.println("Response: " + ping + " cm"); 
		r.sleep(300); 
	
		return ping;
}
}
*/
/*
static void avoid(){
	
}

static float moved(){
	
	
	
}

*/

